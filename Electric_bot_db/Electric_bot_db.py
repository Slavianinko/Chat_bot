import json
import pandas as pd
from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

def bot(text):
    s_text = df[df['Индекс'] == text]['Схема'].values
    print(s_text[0])
    return s_text[0]

# Определение обработчиков команд.
def start(update: Update, context: CallbackContext) -> None:
    """Отправление сообщения, когда будет получена команда Старт"""
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr'Hi {user.mention_markdown_v2()}\!',
        reply_markup=ForceReply(selective=True),
    )


def help_command(update: Update, context: CallbackContext) -> None:
    """Отправление сообщения, когда будет получена команда Help"""
    update.message.reply_text('Help!')


def echo(update: Update, context: CallbackContext) -> None:
    """Отвечаем на сообщение"""
    input_text = update.message.text
    reply = bot(input_text)
    update.message.reply_text(reply)

def main() -> None:
    """Запуск бота"""
    # Создаём Updater и передаём ему токен
    updater = Updater(bot_key['key'])

    # Get the dispatcher to register handlers
    # Регистрация обработчиков
    dispatcher = updater.dispatcher

    # on different commands - answer in Telegram
    # Ответы на команды
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))

    # on non command i.e message - echo the message on Telegram
    # ответ на не команду
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # Запуск бота
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


# -------- Чтение данных из файла -------------------------------------------------
with open('bot_key.json', 'r', encoding='utf-8') as f:
    bot_key = json.load(f)
print(bot_key['key'])



col = [
    'Схема',
    'Спецификация',
    '№ поз. по СП',
    '№ пом.',
    '№ исп.',
    '№ ПУ',
    'Дата закрытия ПУ',
    'Код продукции',
    '№ рем. цеха',
    'Тип',
    'Масса ЭО',
    'Наименование',
    'Индекс',
    'Очередность монтажа',
    'Заводской номер',
    'Стр. район',
    'Заключение по результатам освидетельствования',
    'Заявлено в ремонт/исключено из ремонта',
    'Сопут. работы',
    'Ремонт завершен',
    ('Извещение на отключение оборудования', '№'),
    ('Извещение на отключение оборудования', 'Дата'),
    ('Извещение на отключение оборудования', 'Файл'),
    ('Накладная на демонтаж оборудования', '№'),
    ('Накладная на демонтаж оборудования', 'Дата'),
    ('Накладная на демонтаж оборудования', 'Файл'),
    ('Накладная на передачу забракованного электрооборудования л/с', '№'),
    ('Накладная на передачу забракованного электрооборудования л/с', 'Дата'),
    ('Накладная на передачу забракованного электрооборудования л/с', 'Файл'),
    ('Накладная на принятие обор-я на склад в г.Мурманск', '№'),
    ('Накладная на принятие обор-я на склад в г.Мурманск', 'Дата'),
    ('Накладная на принятие обор-я на склад в г.Мурманск', 'Файл'),
    ('Накладная на передачу в г.Северодвинск на склад цеха №6', '№'),
    ('Накладная на передачу в г.Северодвинск на склад цеха №6', 'Дата'),
    ('Накладная на передачу в г.Северодвинск на склад цеха №6', 'Файл'),
    ('Накладная на получение ремонтным цехом', '№'),
    ('Накладная на получение ремонтным цехом', 'Дата'),
    ('Накладная на получение ремонтным цехом', 'Файл'),
    ('Накладная на получение ремонтным цехом', 'Осмотренно'),
    ('Освид. и дефектация оборудования', '№ акта освид.'),
    ('Освид. и дефектация оборудования', '№ акта дефектации'),
    ('Извещение о выполнении ремонта', '№'),
    ('Извещение о выполнении ремонта', 'Дата'),
    ('Извещение о выполнении ремонта', 'Файл'),
    ('Накладная на передачу оборудования в цех №6 на отправку', '№'),
    ('Накладная на передачу оборудования в цех №6 на отправку', 'Дата'),
    ('Накладная на передачу оборудования в цех №6 на отправку', 'Файл'),
    ('Накладная на отправку оборудования в г. Мурманск', '№'),
    ('Накладная на отправку оборудования в г. Мурманск', 'Дата'),
    ('Накладная на отправку оборудования в г. Мурманск', 'Файл'),
    ('Накладная на передачу электрооборудования АО ЦС Звездочка', '№'),
    ('Накладная на передачу электрооборудования АО ЦС Звездочка', 'Дата'),
    ('Накладная на передачу электрооборудования АО ЦС Звездочка', 'Файл'),
    'Место хранения',
    'Ячейка',
    'Состояние',
    'Номер заявки заводу',
    'Приходный документ',
    ('Заявка в предмонтажную подготовку', '№'),
    ('Заявка в предмонтажную подготовку', 'Дата'),
    ('Сдат. накладная в предмонтажную подготовку', '№'),
    ('Сдат. накладная в предмонтажную подготовку', 'Дата'),
    ('Приходный ордер с предмонтажной подготовки', '№'),
    ('Приходный ордер с предмонтажной подготовки', 'Дата'),
    ('Приходный ордер с предмонтажной подготовки', 'Комментарий'),
    ('Заявка в ПРБ', '№'),
    ('Заявка в ПРБ', 'Дата'),
    ('Заявка на заказ', '№'),
    ('Заявка на заказ', 'Дата'),
    ('Сдаточная накладная на заказ', '№'),
    ('Сдаточная накладная на заказ', 'Дата'),
    ('Извещение об установке', '№'),
    ('Извещение об установке', 'Дата'),
    ('Извещение об установке', 'Файл'),
    ('Извещение об подключении', '№'),
    ('Извещение об подключении', 'Дата'),
    ('Извещение об подключении', 'Дата'),
    ('Извещение об подключении', 'Файл'),
    ('Накладная на передачу личному вч', '№'),
    ('Накладная на передачу личному вч', 'Дата'),
    ('Накладная на передачу личному вч', 'Файл'),
    ('Извещения ВП', '№'),
    ('Извещения ВП', 'Дата'),
    ('Извещения ВП', 'Файл'),
]

df = pd.read_excel('electoeqipment_833.xls')
df.columns = col
df = df.drop(0)
#print(df.info())
#print(df[df.columns[0:5]])

if __name__ == '__main__':
    main()
